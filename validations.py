#!/usr/bin/python
# -*- coding: utf-8 -*-
import copy

from telebot import types
import re

room_list = ['1', '2', '3', '4', '5', '6', '7', '8', '9']

house_type_list = ['–∫–∏—Ä–ø–∏—á–Ω—ã–π', '–ø–∞–Ω–µ–ª—å–Ω—ã–π', '–º–æ–Ω–æ–ª–∏—Ç–Ω—ã–π', '–∫–∞—Ä–∫–∞—Å–Ω–æ-–∫–∞–º—ã—à–∏—Ç–æ–≤—ã–π', '–∏–Ω–æ–µ']

region_list = ['–ê–ª–∞—Ç–∞—É—Å–∫–∏–π —Ä-–Ω',
               '–ê–ª–º–∞–ª–∏–Ω—Å–∫–∏–π —Ä-–Ω',
               '–ê—É—ç–∑–æ–≤—Å–∫–∏–π —Ä-–Ω',
               '–ë–æ—Å—Ç–∞–Ω–¥—ã–∫—Å–∫–∏–π —Ä-–Ω',
               '–ñ–µ—Ç—ã—Å—É—Å–∫–∏–π —Ä-–Ω',
               '–ú–µ–¥–µ—É—Å–∫–∏–π —Ä-–Ω',
               '–ù–∞—É—Ä—ã–∑–±–∞–π—Å–∫–∏–π —Ä-–Ω',
               '–¢—É—Ä–∫—Å–∏–±—Å–∫–∏–π —Ä-–Ω']

state_list = ['—Ö–æ—Ä–æ—à–µ–µ',
              '—Å—Ä–µ–¥–Ω–µ–µ',
              '–µ–≤—Ä–æ—Ä–µ–º–æ–Ω—Ç',
              '—Ç—Ä–µ–±—É–µ—Ç —Ä–µ–º–æ–Ω—Ç–∞',
              '—Å–≤–æ–±–æ–¥–Ω–∞—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∫–∞',
              '—á–µ—Ä–Ω–æ–≤–∞—è –æ—Ç–¥–µ–ª–∫–∞']

internet_list = ['ADSL',
                 '—á–µ—Ä–µ–∑ TV –∫–∞–±–µ–ª—å',
                 '–ø—Ä–æ–≤–æ–¥–Ω–æ–π',
                 '–æ–ø—Ç–∏–∫–∞',
                 '–Ω–µ—Ç']

bathroom_list = ['—Ä–∞–∑–¥–µ–ª—å–Ω—ã–π',
                 '—Å–æ–≤–º–µ—â–µ–Ω–Ω—ã–π',
                 '2 —Å/—É –∏ –±–æ–ª–µ–µ',
                 '–Ω–µ—Ç']

yes_no_list = ['–Ω–µ—Ç',
               '–¥–∞']

furniture_list = ['–ø–æ–ª–Ω–æ—Å—Ç—å—é',
                  '—á–∞—Å—Ç–∏—á–Ω–æ',
                  '–ø—É—Å—Ç–∞—è']

feedback_list = ['–æ—á–µ–Ω—å –¥–µ—à–µ–≤–æ',
                 '–¥–µ—à–µ–≤–æ',
                 '–Ω–æ—Ä–º–∞–ª—å–Ω–æ',
                 '–¥–æ—Ä–æ–≥–æ',
                 '–æ—á–µ–Ω—å –¥–æ—Ä–æ–≥–æ']

roomSelect = types.ReplyKeyboardMarkup(one_time_keyboard=True, row_width=3, resize_keyboard=True)
roomSelect.add(*(room_list+["‚¨Ö –ù–∞–∑–∞–¥"]))

houseTypeSelect = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
houseTypeSelect.add(*(house_type_list+["‚¨Ö –ù–∞–∑–∞–¥", "üîö –í—ã–π—Ç–∏"]))

hostelSelect = types.ReplyKeyboardMarkup(one_time_keyboard=True, row_width=2, resize_keyboard=True)
hostelSelect.add(*(yes_no_list+["‚¨Ö –ù–∞–∑–∞–¥", "üîö –í—ã–π—Ç–∏"]))

regionSelect = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
regionSelect.add(*(region_list+["‚¨Ö –ù–∞–∑–∞–¥", "üîö –í—ã–π—Ç–∏"]))

confirmSelect = types.ReplyKeyboardMarkup(one_time_keyboard=True, row_width=2, resize_keyboard=True)
confirmSelect.add(*(yes_no_list+["‚¨Ö –ù–∞–∑–∞–¥", "üîö –í—ã–π—Ç–∏"]))

stateSelect = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
stateSelect.add(*(state_list+["‚¨Ö –ù–∞–∑–∞–¥", "üîö –í—ã–π—Ç–∏"]))

internetSelect = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
internetSelect.add(*(internet_list+["‚¨Ö –ù–∞–∑–∞–¥", "üîö –í—ã–π—Ç–∏"]))

bathroomSelect = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
bathroomSelect.add(*(bathroom_list+["‚¨Ö –ù–∞–∑–∞–¥", "üîö –í—ã–π—Ç–∏"]))

furnitureSelect = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
furnitureSelect.add(*(furniture_list+["‚¨Ö –ù–∞–∑–∞–¥", "üîö –í—ã–π—Ç–∏"]))

feedbackSelect = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
feedbackSelect.add(*feedback_list)

commonSelect = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
commonSelect.add(*["‚¨Ö –ù–∞–∑–∞–¥", "üîö –í—ã–π—Ç–∏"])

finalSelect = copy.deepcopy(commonSelect)
finalSelect.row_width = 2
finalSelect.add("üîπ –ü–æ—Å—á–∏—Ç–∞—Ç—å üîπ")

default_keyboard = types.InlineKeyboardMarkup()
phone_button = types.InlineKeyboardButton(text="–î–æ–º–∞—à–Ω–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω ‚úñ", callback_data="phone")
balcony_button = types.InlineKeyboardButton(text="–ë–∞–ª–∫–æ–Ω ‚úñ", callback_data="balcony")
parking_button = types.InlineKeyboardButton(text="–ü–∞—Ä–∫–æ–≤–∫–∞ ‚úñ", callback_data="parking")

default_keyboard.add(phone_button)
default_keyboard.add(balcony_button)
default_keyboard.add(parking_button)


def validate_room(msg):
    room_cnt = ''.join([c for c in msg if c in '1234567890.']).strip()
    if room_cnt.isdigit() and 0 < int(room_cnt) < 10:
        return room_cnt
    else:
        return False

def validate_house_type(msg):
    msg = msg.strip().lower()
    if msg in house_type_list:
        return msg
    return False

def validate_floor(msg):
    if re.match("^[0-9]* –∏–∑ [0-9]*$", msg):
        msg = msg.split()
        if int(msg[0]) < int(msg[2]) and int(msg[2]) <= 50:
            return [msg[0], msg[2]]
    return False


def validate_at_the_hostel(msg):
    msg = msg.strip().lower()
    if msg in yes_no_list:
        return str(yes_no_list.index(msg))
    return False


def validate_furniture(msg):
    msg = msg.strip().lower()
    if msg in furniture_list:
        if (furniture_list.index(msg) == 0):
            return "1.0"
        if (furniture_list.index(msg) == 1):
            return "0.5"
        if (furniture_list.index(msg) == 2):
            return "0.0"
    return False


def validate_region(msg):
    msg = msg.strip()
    if msg in region_list:
        return msg
    return False

def validate_confirm(msg):
    msg = msg.strip().lower()
    if msg in yes_no_list:
        return str(yes_no_list.index(msg))
    return False


def validate_internet(msg):
    msg = msg.strip()
    if msg in internet_list:
        return msg
    return False


def validate_bathroom(msg):
    msg = msg.strip().lower()
    if msg in bathroom_list:
        return msg
    return False


def validate_state(msg):
    msg = msg.strip().lower()
    if msg in state_list:
        return msg
    return False


def validate_built_time(msg):
    built_time = ''.join([c for c in msg if c in '1234567890. ']).strip()
    if built_time.isdigit() and 1900 < int(built_time) < 2017:
        return built_time
    else:
        return False


def validate_all_space(msg):
    all_space = ''.join([c for c in msg if c in '1234567890. ']).strip()
    try:
        if 20. < float(all_space) < 300.:
            return all_space
        else:
            return False
    except:
        return False