#!usr/bin/env python
# -*- coding: utf-8 -*-

import logging
import datetime

import telebot
import cherrypy
import config
import requests

from Main import HousePricing
from flat import Flat
from validations import *

import myapiai


# import pandas as pd

import sys

# sys.path.append("thesun/ML/Controller/")
# sys.path.append("thesun/ML/")
# from System import *

# TRAINING MODEL

model = HousePricing()
model.train_model()

# LOGGING SETTING
logging.basicConfig(level=logging.DEBUG,
                    filename='system.log',
                    format="%(asctime)s - %(levelname)s - %(lineno)s - %(message)s")

logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

handler = logging.FileHandler('history.log')
handler.setLevel(logging.INFO)

formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(lineno)s - %(message)s')
handler.setFormatter(formatter)

logger.addHandler(handler)

# from AddressHandler import *

WEBHOOK_HOST = '146.185.158.146'
WEBHOOK_PORT = 443  # 443, 80, 88 –∏–ª–∏ 8443 (–ø–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–∫—Ä—ã—Ç!)
WEBHOOK_LISTEN = '0.0.0.0'  # –ù–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö –ø—Ä–∏–¥–µ—Ç—Å—è —É–∫–∞–∑—ã–≤–∞—Ç—å —Ç–∞–∫–æ–π –∂–µ IP, —á—Ç–æ –∏ –≤—ã—à–µ

WEBHOOK_SSL_CERT = './webhook_cert.pem'  # –ü—É—Ç—å –∫ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—É
WEBHOOK_SSL_PRIV = './webhook_pkey.pem'  # –ü—É—Ç—å –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É –∫–ª—é—á—É

WEBHOOK_URL_BASE = "https://%s:%s" % (WEBHOOK_HOST, WEBHOOK_PORT)
WEBHOOK_URL_PATH = "/%s/" % config.token

bot = telebot.TeleBot(config.token)

flat_dict = {}
step = {}
query_limit = {}
last_query_day = {}


# –ù–∞—à –≤–µ–±—Ö—É–∫-—Å–µ—Ä–≤–µ—Ä
# class WebhookServer(object):
#     @cherrypy.expose
#     def index(self):
#         if 'content-length' in cherrypy.request.headers and \
#                         'content-type' in cherrypy.request.headers and \
#                         cherrypy.request.headers['content-type'] == 'application/json':
#             length = int(cherrypy.request.headers['content-length'])
#             json_string = cherrypy.request.body.read(length).decode("utf-8")
#             update = telebot.types.Update.de_json(json_string)
#             # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
#             bot.process_new_updates([update])
#             return ''
#         else:
#             raise cherrypy.HTTPError(403)


def in_step_handler(chat_id):
    if step.get(chat_id, 0) == 0 or step.get(chat_id, 0) == None:
        return False
    return True


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—ã /start –∏ /help
@bot.message_handler(commands=['help', 'start'])
def welcome_message(message):
    wlc_msg = "–ü—Ä–∏–≤–µ—Ç!\n–¢—ã –æ–±—Ä–∞—Ç–∏–ª—Å—è –∫ –±–æ—Ç—É, –∫–æ—Ç–æ—Ä—ã–π —Å–º–æ–∂–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—É –¥–ª—è —Ç–≤–æ–µ–π –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏. üè° ‚û° üí∞"
    help_msg = "*/ask* - —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤–∞—à–µ–π –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–µ–Ω—ã"
    bot.send_message(message.chat.id, wlc_msg + "\n\n" + help_msg, parse_mode="Markdown")

attributes = ['room_number',  # 0
              'house_type',  # 1
              'built_time',  # 2
              'floor',  # 3
              'all_space',  # 4
              'living_space',  # 5
              'kitchen_space',  # 6
              'at_the_hostel',  # 7
              'region',  # 8
              'map_complex',  # 9
              'addr_street',  # 10
              'addr_number',  # 11
              'state',  # 12
              'phone',  # 13
              'internet',  # 14
              'bathroom',  # 15
              'balcony',  # 16
              'balcony_is_glazed',  # 17
              'door',  # 18
              'parking',  # 19
              'furniture',  # 20
              'flooring',  # 21
              'ceiling']  # 22

to_ask = [True, True, True, True,
          True, False, False, True,
          True, False, True, True,
          True, True, True, True,
          True, False, False, True,
          True, False, False]
'''
to_ask = [False, False, False, False,
          False, False, False, False,
          True, False, True, True,
          True, True, True, True,
          True, False, False, True,
          True, False, False]
'''
questions = ['–°–∫–æ–ª—å–∫–æ –∫–æ–º–Ω–∞—Ç –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ?',
             '–ö–∞–∫–æ–π —Ç–∏–ø —Å—Ç—Ä–æ–µ–Ω–∏—è —É –∫–≤–∞—Ä—Ç–∏—Ä—ã?',
             '–ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –¥–æ–º–∞(—Å–¥–∞—á–∏ –≤ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—é)?',
             '–ù–∞ –∫–∞–∫–æ–º —ç—Ç–∞–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∫–≤–∞—Ä—Ç–∏—Ä–∞? (–ø—Ä–∏–º. "7 –∏–∑ 10")',
             '–ö–∞–∫–æ–≤–∞ –æ–±—â–∞—è –ø–ª–æ—â–∞–¥—å? (–ø—Ä–∏–º. "75.5" –º2)',
             '–ö–∞–∫–æ–≤–∞ –ø–ª–æ—â–∞–¥—å –∂–∏–ª–æ–π –∫–æ–º–Ω–∞—Ç—ã? (–ø—Ä–∏–º. "41" –º2)',
             '–ö–∞–∫–æ–≤–∞ –ø–ª–æ—â–∞–¥—å –∫—É—Ö–∞–Ω–Ω–æ–π? (–ø—Ä–∏–º. "12.2" –º2)',
             '–ö–≤–∞—Ä—Ç–∏—Ä–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º –æ–±—â–µ–∂–∏—Ç–∏–∏?',
             '–í –∫–∞–∫–æ–º —Ä–∞–π–æ–Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è?',
             '–ñ–∏–ª–æ–π –∫–æ–º–ø–ª–µ–∫—Å –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –¥–æ–º? (–ø—Ä–∏–º. "–Ω–µ—Ç" –∏–ª–∏ "–ù—É—Ä–ª—ã –¢–∞—É")',
             '–£–ª–∏—Ü–∞ –∏–ª–∏ –º–∏–∫—Ä–æ—Ä–∞–π–æ–Ω?',
             '–ù–æ–º–µ—Ä –¥–æ–º–∞?',
             '–í –∫–∞–∫–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –¥–æ–º?',
             '–ò–º–µ–µ—Ç—Å—è –ª–∏ –¥–æ–º–∞—à–Ω–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω?',
             '–ö–∞–∫–æ–π –≤–∏–¥ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –∏–º–µ–µ—Ç—Å—è –≤ –≤–∞—à–µ–º –¥–æ–º–µ?',
             '–¢–∏–ø —Å–∞–Ω—É–∑–µ–ª–∞(–≤–∞–Ω–Ω–∞—è,—Ç—É–∞–ª–µ—Ç)?',
             '–ï—Å—Ç—å –ª–∏ –±–∞–ª–∫–æ–Ω?',
             '–ë–∞–ª–∫–æ–Ω –æ—Å—Ç–µ–∫–ª–µ–Ω?',
             '–¢–∏–ø –≤—Ö–æ–¥–Ω–æ–π –¥–≤–µ—Ä–∏?',
             '–ï—Å—Ç—å –ª–∏ —Ä—è–¥–æ–º –ø–∞—Ä–∫–æ–≤–∫–∞?',
             '–ù–∞—Å–∫–æ–ª—å–∫–æ –º–µ–±–µ–ª–∏—Ä–æ–≤–∞–Ω–∞ –∫–≤–∞—Ä—Ç–∏—Ä–∞?',
             '–ö–∞–∫–∏–º –º–∞—Ç–µ—Ä–∏–∞–ª–æ–º –ø–æ–∫—Ä—ã—Ç –ø–æ–ª?',
             '–í—ã—Å–æ—Ç–∞ –ø–æ—Ç–æ–ª–∫–æ–≤ –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ? (–ø—Ä–∏–º. "2.9" –≤ –º–µ—Ç—Ä–∞—Ö)']

selections = [roomSelect,
              houseTypeSelect,
              None,
              None,
              None,
              None,
              None,
              hostelSelect,
              regionSelect,
              None,
              None,
              None,
              stateSelect,
              phoneSelect,
              internetSelect,
              bathroomSelect,
              balconySelect,
              balconyIsGlazedSelect,
              doorSelect,
              parkingSelect,
              furnitureSelect,
              flooringSelect,
              None]

validations = [validate_room,
               validate_house_type,
               validate_built_time,
               validate_floor,
               validate_all_space,
               None,
               None,
               validate_at_the_hostel,
               validate_region,
               None,
               validate_addr_street,
               None,
               validate_state,
               validate_phone,
               validate_internet,
               validate_bathroom,
               validate_balcony,
               None,
               None,
               validate_parking,
               validate_furniture,
               None,
               None]

MAX_QUERY_LIMIT = 3

order = [1, 2, 10, 7, 12, 13, 3, 5, 14, 11, 15, 16, 6, 4, 8, 9]

@bot.message_handler(commands=['ask'])
def ask(message):
    try:
        chat_id = message.chat.id
        prev_step = step.get(chat_id, None)
        cur_step = prev_step

        # –ó–¥–µ—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ (–∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–Ω—è –¥–µ–≥–µ–Ω–¥–µ–π)
        if cur_step is None:
            cur_step = 0

            today = datetime.date.today().day
            if chat_id not in last_query_day or last_query_day[chat_id] != today:
                query_limit[chat_id] = MAX_QUERY_LIMIT
            if query_limit[chat_id] == 0:
                bot.send_message(chat_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫.")
                return
            last_query_day[chat_id] = today
            logger.info(" chat_id - [%s] : Asking is started!" % chat_id)
        else:
            prev_step -= 1

        if chat_id not in flat_dict:
            flat_dict[chat_id] = Flat()

        # –ò—Ç–µ—Ä–∏—Ä—É–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –Ω—É–∂–Ω–æ–≥–æ –Ω–∞–º –≤–æ–ø—Ä–æ—Å–∞
        while cur_step < len(questions) and to_ask[cur_step] is False:
            cur_step += 1

        # –ó–¥–µ—Å—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
        if prev_step is not None and prev_step < len(questions):
            logger.info(" chat_id - [%s] : message - %s" % (chat_id, message.text))
            flat = flat_dict[chat_id]
            if validations[prev_step] is not None:
                val_string = validations[prev_step](message.text)
                if isinstance(val_string, bool):
                    msg = bot.send_message(chat_id, "–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –≤–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
                    bot.register_next_step_handler(msg, ask)
                    return
                setattr(flat, attributes[prev_step], val_string)
            else:
                #flat_dict[chat_id] = flat + "|" + message.text
                setattr(flat, attributes[prev_step], message.text)

        if cur_step < len(questions):
            msg = bot.send_message(chat_id,
                                   '*' + questions[cur_step] + '*',
                                   reply_markup=selections[cur_step],
                                   parse_mode="Markdown")
            step[chat_id] = cur_step + 1
            bot.register_next_step_handler(msg, ask)
        elif cur_step == len(questions):
            flat = flat_dict[chat_id].__dict__
            data = list(flat.values())

            new_data = []
            for pos in order[:-2]:
                if (pos == 4):
                    new_data.extend(data[pos])
                else:
                    new_data.append(data[pos])
            new_data.append("%s, %s" % (data[order[-2]], data[order[-1]]))
            data = "|".join(new_data)
            logger.info(" chat_id - [%s] : message - got all data - %s" % (chat_id, data))

            msg = bot.send_message(chat_id, "Calculating...")
            price = model.predict(data)
            bot.send_message(chat_id, "–Ø –¥—É–º–∞—é, –ø–æ–¥—Ö–æ–¥—è—â–∞—è —Ü–µ–Ω–∞ - " + price)
            logger.info(" chat_id - [%s] : message - finished, predicted price - %s" % (chat_id, price))

            msg = bot.send_message(chat_id,
                                   '*–û—Ü–µ–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –≤–∞—à–∏—Ö –æ–∂–∏–¥–∞–Ω–∏–∏.*',
                                   reply_markup=feedbackSelect,
                                   parse_mode="Markdown")
            step[chat_id] = cur_step + 1
            bot.register_next_step_handler(msg, ask)
        else:
            step[chat_id] = None
            query_limit[chat_id] -= 1
            bot.send_message(chat_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç!\n–£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å %s –ø–æ–ø—ã—Ç–æ–∫ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è." % query_limit[chat_id])
            logger.info(" chat_id - [%s] : message - User's feedback = %s" % (chat_id, message.text))
    except Exception as e:
        logger.error(" chat_id - [%s] : message - %s" % (message.chat.id, str(e)))
        bot.reply_to(message, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.')
        step[message.chat.id] = 0


@bot.message_handler(func=lambda message: in_step_handler(message.chat.id) == False, content_types=['text'])
def echo_message(message):
    try:
        logger.info(" chat_id - [%s] : message - %s" % (message.chat.id, message.text))
        bot.reply_to(message, myapiai.get_response(message.text))
    except Exception as e:
        logger.error(" chat_id - [%s] : message - %s" % (message.chat.id, e.strerror))
        bot.reply_to(message, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.')

bot.remove_webhook()

bot.polling(none_stop=True)

# # –°–Ω–∏–º–∞–µ–º –≤–µ–±—Ö—É–∫ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π (–∏–∑–±–∞–≤–ª—è–µ—Ç –æ—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–æ–±–ª–µ–º)
# bot.remove_webhook()
#
# # –°—Ç–∞–≤–∏–º –∑–∞–Ω–æ–≤–æ –≤–µ–±—Ö—É–∫
# bot.set_webhook(url=WEBHOOK_URL_BASE + WEBHOOK_URL_PATH,
#                 certificate=open(WEBHOOK_SSL_CERT, 'r'))
#
# # –£–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ CherryPy
# cherrypy.config.update({
#     'server.socket_host': WEBHOOK_LISTEN,
#     'server.socket_port': WEBHOOK_PORT,
#     'server.ssl_module': 'builtin',
#     'server.ssl_certificate': WEBHOOK_SSL_CERT,
#     'server.ssl_private_key': WEBHOOK_SSL_PRIV
# })
#
# # –°–æ–±—Å—Ç–≤–µ–Ω–Ω–æ, –∑–∞–ø—É—Å–∫!
# cherrypy.quickstart(WebhookServer(), WEBHOOK_URL_PATH, {'/': {}})
