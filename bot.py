#!usr/bin/env python
# -*- coding: utf-8 -*-

import logging

import datetime
import telebot
import config

from telebot.types import LabeledPrice

from Main import HousePricing
from flat import Flat
from validations import *

import myapiai

# LOGGING SETTING
logging.basicConfig(level=logging.DEBUG,
                    filename='system.log',
                    format="%(asctime)s - %(levelname)s - %(lineno)s - %(message)s")

logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

handler = logging.FileHandler('history.log')
handler.setLevel(logging.INFO)

formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(lineno)s - %(message)s')
handler.setFormatter(formatter)

logger.addHandler(handler)

# TRAINING MODEL

print("Started training..")

model = HousePricing()
model.train_model()

print("Finished training!")

WEBHOOK_HOST = '146.185.158.146/'
WEBHOOK_PORT = 443  # 443, 80, 88 –∏–ª–∏ 8443 (–ø–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–∫—Ä—ã—Ç!)
WEBHOOK_LISTEN = '0.0.0.0'  # –ù–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö –ø—Ä–∏–¥–µ—Ç—Å—è —É–∫–∞–∑—ã–≤–∞—Ç—å —Ç–∞–∫–æ–π –∂–µ IP, —á—Ç–æ –∏ –≤—ã—à–µ

WEBHOOK_SSL_CERT = './webhook_cert.pem'  # –ü—É—Ç—å –∫ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—É
WEBHOOK_SSL_PRIV = './webhook_pkey.pem'  # –ü—É—Ç—å –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É –∫–ª—é—á—É

WEBHOOK_URL_BASE = "https://%s:%s" % (WEBHOOK_HOST, WEBHOOK_PORT)
WEBHOOK_URL_PATH = "/%s/" % config.token

provider_token = '284685063:TEST:N2JmZGYxNDc1NmJk'  # @BotFather -> Bot Settings -> Payments

prices = [LabeledPrice(label='House Agent Service', amount=5750), LabeledPrice('Gift wrapping', 500)]

bot = telebot.AsyncTeleBot(config.token, threaded=True)

flat_dict = {}
step = {}
query_limit = {}
last_query_day = {}
wait_location = {}


# # –ù–∞—à –≤–µ–±—Ö—É–∫-—Å–µ—Ä–≤–µ—Ä
# class WebhookServer(object):
#     @cherrypy.expose
#     def index(self):
#         if 'content-length' in cherrypy.request.headers and \
#                         'content-type' in cherrypy.request.headers and \
#                         cherrypy.request.headers['content-type'] == 'application/json':
#             length = int(cherrypy.request.headers['content-length'])
#             json_string = cherrypy.request.body.read(length).decode("utf-8")
#             update = telebot.types.Update.de_json(json_string)
#             # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
#             bot.process_new_updates([update])
#             return ''
#         else:
#             raise cherrypy.HTTPError(403)


def in_step_handler(chat_id):
    if step.get(chat_id, None) == None:
        return False
    return True


# wlc_msg = "–ü—Ä–∏–≤–µ—Ç!\n–¢—ã –æ–±—Ä–∞—Ç–∏–ª—Å—è –∫ –±–æ—Ç—É, –∫–æ—Ç–æ—Ä—ã–π —Å–º–æ–∂–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—É –¥–ª—è —Ç–≤–æ–µ–π –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏. üè° ‚û° üí∞"

wlc_msg = "\n–ü—Ä–∏–≤–µ—Ç!" \
          "\n–ü–µ—Ä–µ–¥ –≤–∞–º–∏ –±–æ—Ç-–æ—Ü–µ–Ω—â–∏–∫ —Ä—ã–Ω–æ—á–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤–∞—à–µ–π –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏. " \
          "–Ø –¥–∞—é –Ω–∞–∏–±–æ–ª–µ–µ –±—ã—Å—Ç—Ä—É—é –∏ –Ω–∞–∏–±–æ–ª–µ–µ –æ–±—å–µ–∫—Ç–∏–≤–Ω—É—é –æ—Ü–µ–Ω–∫—É –≤–∞—à–µ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –¥—Ä—É–≥–∏—Ö –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ—Ö–æ–∂–∏—Ö –Ω–∞ –Ω–µ–µ." \
          "\n–Ø –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤—É—é—Å—å –∏ –æ–±—É—á–∞—é—Å—å. " \
          "–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É +77028759922 –∏–ª–∏ –ø–æ –ø–æ—á—Ç–µ ocenshik10@gmail.com"

help_msg = "*/ask* - —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤–∞—à–µ–π –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–µ–Ω—ã"


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—ã /start –∏ /help

@bot.message_handler(func=lambda message: in_step_handler(message.chat.id) == False, commands=['help', 'start'])
def welcome_message(message):
    bot.send_message(message.chat.id, wlc_msg + "\n\n" + help_msg, parse_mode="Markdown")


attributes = ['room_number',  # 0
              'house_type',  # 1
              'built_time',  # 2
              'floor',  # 3
              'all_space',  # 4
              'at_the_hostel',  # 5
              'region',  # 6
              'addr_street',  # 7
              'addr_number',  # 8
              None,  # 9
              'state',  # 10
              'bathroom',  # 11
              'furniture',  # 12
              'internet']  # 13

# to_ask = [True, True, True, True,
#           True, True, True, True,
#           True, True, True, True,
#           True, True]

questions = ['–°–∫–æ–ª—å–∫–æ –∫–æ–º–Ω–∞—Ç –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ?',  # 0
             '–ö–∞–∫–æ–π —Ç–∏–ø —Å—Ç—Ä–æ–µ–Ω–∏—è —É –∫–≤–∞—Ä—Ç–∏—Ä—ã?',  # 1
             '–ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –¥–æ–º–∞(—Å–¥–∞—á–∏ –≤ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—é)?',  # 2
             '–ù–∞ –∫–∞–∫–æ–º —ç—Ç–∞–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∫–≤–∞—Ä—Ç–∏—Ä–∞? (–ø—Ä–∏–º. "7 –∏–∑ 10")',  # 3
             '–ö–∞–∫–æ–≤–∞ –æ–±—â–∞—è –ø–ª–æ—â–∞–¥—å? (–ø—Ä–∏–º. "75.5" –º2)',  # 4
             '–ö–≤–∞—Ä—Ç–∏—Ä–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º –æ–±—â–µ–∂–∏—Ç–∏–∏?',  # 5
             '–í –∫–∞–∫–æ–º —Ä–∞–π–æ–Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è?',  # 6
             '–£–ª–∏—Ü–∞ –∏–ª–∏ –º–∏–∫—Ä–æ—Ä–∞–π–æ–Ω?',  # 7
             '–ù–æ–º–µ—Ä –¥–æ–º–∞?',  # 8
             '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ —É–∫–∞–∑–∞–Ω–æ –º–µ—Å—Ç–æ—Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã –Ω–∞ –∫–∞—Ä—Ç–µ?',  # 9
             '–í –∫–∞–∫–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –¥–æ–º?',  # 10
             '–¢–∏–ø —Å–∞–Ω—É–∑–µ–ª–∞(–≤–∞–Ω–Ω–∞—è,—Ç—É–∞–ª–µ—Ç)?',  # 11
             '–ù–∞—Å–∫–æ–ª—å–∫–æ –º–µ–±–ª–∏—Ä–æ–≤–∞–Ω–∞ –∫–≤–∞—Ä—Ç–∏—Ä–∞?',  # 12
             '–ö–∞–∫–æ–π –≤–∏–¥ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –∏–º–µ–µ—Ç—Å—è –≤ –≤–∞—à–µ–º –¥–æ–º–µ?',  # 13
             '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—Å—Ç—É—Å—Ç–≤—É—é—Ç –≤ –≤–∞—à–µ–π –∫–≤–∞—Ä—Ç–∏—Ä–µ? ']  # 14

selections = [roomSelect,
              houseTypeSelect,
              commonSelect,
              commonSelect,
              commonSelect,
              hostelSelect,
              regionSelect,
              commonSelect,
              commonSelect,
              confirmSelect,
              stateSelect,
              bathroomSelect,
              furnitureSelect,
              internetSelect,
              default_keyboard]

validations = [validate_room,
               validate_house_type,
               validate_built_time,
               validate_floor,
               validate_all_space,
               validate_at_the_hostel,
               validate_region,
               validate_addr_street,
               validate_addr_number,
               validate_confirm,
               validate_state,
               validate_bathroom,
               validate_furniture,
               validate_internet,
               None]

MAX_QUERY_LIMIT = 1


order = [1, 2, 10, 7, 13, 11, 3, 5, 15, 14, 16, 12, 6, 4]
CONFIRM_STEP = 9
STATE_STEP = 10


@bot.message_handler(func=lambda message: (message.text == "/ask" or in_step_handler(message.chat.id) == True),
                     content_types=['text', 'location'])
def ask(message):
    chat_id = message.chat.id
    cur_step = step.get(chat_id, None)

    # –ó–¥–µ—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ (–∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–Ω—è –¥–µ–≥–µ–Ω–¥–µ–π)
    try:
        if cur_step is None:
            prev_step = None
            cur_step = 0

            today = datetime.date.today().day
            if chat_id not in last_query_day or last_query_day[chat_id] != today:
                query_limit[chat_id] = MAX_QUERY_LIMIT
            if query_limit[chat_id] == 0:
                bot.send_message(chat_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫.")
                return
            last_query_day[chat_id] = today
            last_keyboard[chat_id] = default_keyboard
            wait_location[chat_id] = False
            logger.info(" chat_id - [%s] : Asking is started!" % chat_id)
        else:
            prev_step = cur_step - 1
    except Exception as e:
        step[chat_id] = None
        logger.error(" chat_id - [%s] : message - %s" % (message.chat.id, e))
        bot.reply_to(message, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.')

    try:
        if cur_step - 1 == CONFIRM_STEP:
            if wait_location[chat_id] == True:
                if message.location == None:
                    msg = bot.send_message(chat_id,
                                           "*–ù–æ —è –∂–¥—É –ª–æ–∫–∞—Ü–∏—é –≤–∞—à–µ–≥–æ –¥–æ–º–∞, –ø—Ä–æ—à—É, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–æ–∫–∞—Ü–∏—é.*",
                                           parse_mode="Markdown")
                    # bot.register_next_step_handler(msg, ask)
                    return
                else:
                    flat_dict[chat_id].location = (str(message.location.latitude), str(message.location.longitude))
                    bot.send_message(chat_id,
                                     "*–û—Ç–ª–∏—á–Ω–æ!.*",
                                     parse_mode="Markdown")
                    cur_step += 1
                    msg = bot.send_message(chat_id,
                                           '*' + questions[cur_step - 1] + '*',
                                           reply_markup=selections[cur_step - 1],
                                           parse_mode="Markdown")
                    step[chat_id] = cur_step
                    wait_location[chat_id] = False
                    # bot.register_next_step_handler(msg, ask)
                    return
            if message.text == "–Ω–µ—Ç":
                msg = bot.send_message(chat_id,
                                       "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–≥–¥–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –≤–∞—à–µ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã (—á–µ—Ä–µ–∑ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å(–∑–Ω–∞–∫ —Å–∫—Ä–µ–ø–∫–∏) --> –ª–æ–∫–∞—Ü–∏—è(location)).",
                                       parse_mode="Markdown")
                wait_location[chat_id] = True
                # bot.register_next_step_handler(msg, ask)
                return

    except Exception as e:
        step[chat_id] = None
        logger.error(" chat_id - [%s] : message - %s" % (message.chat.id, e))
        bot.reply_to(message, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.')

    try:
        if message.text == "‚¨Ö –ù–∞–∑–∞–¥" and 0 < cur_step <= len(questions):
            if cur_step - 1 == STATE_STEP:
                cur_step -= 2
            else:
                cur_step -= 1
            msg = bot.send_message(chat_id,
                                   '*' + questions[cur_step - 1] + '*',
                                   reply_markup=selections[cur_step - 1],
                                   parse_mode="Markdown")
            step[chat_id] = cur_step
            # bot.register_next_step_handler(msg, ask)
            return
    except Exception as e:
        step[chat_id] = None
        logger.error(" chat_id - [%s] : message - %s" % (message.chat.id, e))
        bot.reply_to(message, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.')

    if message.text == "üîö –í—ã–π—Ç–∏":
        step[chat_id] = None
        bot.send_message(chat_id, wlc_msg + "\n\n" + help_msg, parse_mode="Markdown")
        return

    if chat_id not in flat_dict:
        flat_dict[chat_id] = Flat()

    # –ò—Ç–µ—Ä–∏—Ä—É–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –Ω—É–∂–Ω–æ–≥–æ –Ω–∞–º –≤–æ–ø—Ä–æ—Å–∞


    # –ó–¥–µ—Å—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
    try:
        if prev_step is not None and prev_step < len(attributes):
            try:
                logger.info(" chat_id - [%s] : message - %s" % (chat_id, message.text))
                flat = flat_dict[chat_id]
                if validations[prev_step] is not None:
                    val_string = validations[prev_step](message.text)
                    if isinstance(val_string, bool):
                        msg = bot.send_message(chat_id, "–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –≤–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
                        # bot.register_next_step_handler(msg, ask)
                        return
                    if attributes[prev_step] is not None:
                        setattr(flat, attributes[prev_step], val_string)
                else:
                    # flat_dict[chat_id] = flat + "|" + message.text
                    if attributes[prev_step] is not None:
                        setattr(flat, attributes[prev_step], message.text)
            except Exception as e:
                logger.error(" chat_id - [%s] : cur_step - %s,  message - %s" % (message.chat.id, cur_step, e))
                bot.reply_to(message, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.')
    except Exception as e:
        logger.error(" chat_id - [%s] : message - %s" % (message.chat.id, e))
        bot.reply_to(message, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.')
        step[message.chat.id] = None

    if cur_step < len(questions):
        if cur_step == CONFIRM_STEP:
            latitude, longitude = HousePricing.yandex_geocoder("%s, %s" % (flat.addr_street, flat.addr_number))
            flat_dict[chat_id].location = (latitude, longitude)
            bot.send_location(chat_id, latitude, longitude)
        msg = bot.send_message(chat_id,
                               '*' + questions[cur_step] + '*',
                               reply_markup=selections[cur_step],
                               parse_mode="Markdown")

        if cur_step == len(questions) - 1:
            bot.send_message(chat_id, text="–ï—Å–ª–∏ –≤—Å–µ –≤—ã–±—Ä–∞–ª–∏, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ—Å—á–∏—Ç–∞—Ç—å!'", reply_markup=finalSelect)
        step[chat_id] = cur_step + 1

        # msg.wait()

        # bot.register_next_step_handler(msg, ask)
        return
    elif cur_step == len(questions):
        flat = flat_dict[chat_id]
        keyboard = last_keyboard[chat_id]
        flat.phone = "0" if (keyboard.keyboard[0][0]['text'][-1] == '‚úñ') else "1"
        flat.balcony = "0" if (keyboard.keyboard[1][0]['text'][-1] == '‚úñ') else "1"
        flat.parking = "0" if (keyboard.keyboard[2][0]['text'][-1] == '‚úñ') else "1"
        flat = flat.__dict__
        loc = flat['location']
        del flat['location']
        data = list(flat.values())
        logger.info("%s" % (flat.keys()))
        new_data = []
        for pos in order:
            if pos == 4:
                new_data.extend(data[pos])
            else:
                new_data.append(data[pos])
        new_data.append(loc[0] + " " + loc[1])
        data = "|".join(new_data)
        logger.info(" chat_id - [%s] : message - got all data - %s" % (chat_id, data))

        msg = bot.send_message(chat_id, "Calculating... ‚Äî> –ò–¥–µ—Ç —Ä–∞—Å—á–µ—Ç...")
        price = model.predict(data)[0]
        bot.send_message(chat_id, "–Ø –¥—É–º–∞—é, –ø–æ–¥—Ö–æ–¥—è—â–∞—è —Ü–µ–Ω–∞ - " + str(price))
        logger.info(" chat_id - [%s] : message - finished, predicted price - %s" % (chat_id, price))

        msg = bot.send_message(chat_id,
                               '*–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –≤–∞—à–∏—Ö –æ–∂–∏–¥–∞–Ω–∏–π*',
                               reply_markup=feedbackSelect,
                               parse_mode="Markdown")
        step[chat_id] = cur_step + 1
        # bot.register_next_step_handler(msg, ask)
        return
    else:
        step[chat_id] = None
        query_limit[chat_id] -= 1
        if query_limit[chat_id] == 0:
            bot.send_message(chat_id,
                             "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç!\n–í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ù—É–∂–Ω–æ –∑–∞–ø–ª–∞—Ç–∏—Ç—å –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–º.")
            bot.send_invoice(message.chat.id, title='House Agent',
                             description='–£–∑–Ω–∞–π—Ç–µ —Ü–µ–Ω—É –≤–∞—à–µ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã –ø—Ä—è–º–æ —Ç—É—Ç –∏ —Å–µ–π—á–∞—Å!'
                                         '\n–ù–µ—Ç –Ω—É–∂–¥—ã –Ω–∞–Ω–∏–º–∞—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞!'
                                         '\n–°—ç–∫–æ–Ω–æ–º—å—Ç–µ –≤—Ä–µ–º—è, –≤—ã –≤—ã—á–∏—Å–ª–∏–º —Ü–µ–Ω—É –≤–∞—à–µ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã –º–≥–Ω–æ–≤–µ–Ω–Ω–æ!',
                             provider_token=provider_token,
                             currency='usd',
                             photo_url='https://www.imoney.my/articles/wp-content/uploads/2014/01/real-estate-agent.jpg',
                             photo_height=512,  # !=0/None or picture won't be shown
                             photo_width=512,
                             photo_size=512,
                             is_flexible=False,  # True If you need to set up Shipping Fee
                             prices=prices,
                             start_parameter='house-agent',
                             invoice_payload='–ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å!')

        else:
            bot.send_message(chat_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç!")
        logger.info(" chat_id - [%s] : message - User's feedback = %s" % (chat_id, message.text))


last_keyboard = {}

@bot.pre_checkout_query_handler(func=lambda query: True)
def checkout(pre_checkout_query):
    bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True,
                                  error_message="Aliens tried to steal your card's CVV, but we successfully protected your credentials,"
                                                " try to pay again in a few minutes, we need a small rest.")

@bot.message_handler(content_types=['successful_payment'])
def got_payment(message):
    query_limit[message.chat.id] = MAX_QUERY_LIMIT
    bot.send_message(message.chat.id,
                     '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–∞–ª—å—à–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —É—Å–ª—É–≥–æ–π.',
                     parse_mode='Markdown')

@bot.message_handler(func=lambda message: in_step_handler(message.chat.id) == False, content_types=['text'])
def echo_message(message):
    try:
        logger.info(" chat_id - [%s] : message - %s" % (message.chat.id, message.text))
        bot.reply_to(message, myapiai.get_response(message.text))
    except Exception as e:
        logger.error(" chat_id - [%s] : message - %s" % (message.chat.id, e))
        bot.reply_to(message, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.')


# –í –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ —Å–ª—É—á–∞–µ–≤ —Ü–µ–ª–µ—Å–æ–æ–±—Ä–∞–∑–Ω–æ —Ä–∞–∑–±–∏—Ç—å —ç—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∞–ª–µ–Ω—å–∫–∏—Ö
@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞ —Å –±–æ—Ç–æ–º
    if call.message:
        if call.data == "phone":
            keyboard = last_keyboard[call.message.chat.id]
            if keyboard.keyboard[0][0]['text'][-1] == '‚úñ':
                keyboard.keyboard[0][0]['text'] = "–î–æ–º–∞—à–Ω–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω ‚úî"
            else:
                keyboard.keyboard[0][0]['text'] = "–î–æ–º–∞—à–Ω–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω ‚úñ"
            last_keyboard[call.message.chat.id] = keyboard
            bot.edit_message_reply_markup(chat_id=call.message.chat.id,
                                          message_id=call.message.message_id,
                                          reply_markup=keyboard)
        if call.data == "balcony":
            keyboard = last_keyboard[call.message.chat.id]
            if keyboard.keyboard[1][0]['text'][-1] == '‚úñ':
                keyboard.keyboard[1][0]['text'] = "–ë–∞–ª–∫–æ–Ω ‚úî"
            else:
                keyboard.keyboard[1][0]['text'] = "–ë–∞–ª–∫–æ–Ω ‚úñ"
            last_keyboard[call.message.chat.id] = keyboard
            bot.edit_message_reply_markup(chat_id=call.message.chat.id,
                                          message_id=call.message.message_id,
                                          reply_markup=keyboard)
        if call.data == "parking":
            keyboard = last_keyboard[call.message.chat.id]
            if keyboard.keyboard[2][0]['text'][-1] == '‚úñ':
                keyboard.keyboard[2][0]['text'] = "–ü–∞—Ä–∫–∏–Ω–≥ ‚úî"
            else:
                keyboard.keyboard[2][0]['text'] = "–ü–∞—Ä–∫–∏–Ω–≥ ‚úñ"
            last_keyboard[call.message.chat.id] = keyboard
            bot.edit_message_reply_markup(chat_id=call.message.chat.id,
                                          message_id=call.message.message_id,
                                          reply_markup=keyboard)

        if call.data == "back":
            msg = call.message
            msg.text = "‚¨Ö –ù–∞–∑–∞–¥"
            # bot.register_next_step_handler(msg, ask)
            return
        if call.data == "exit":
            msg = bot.send_message()
            # bot.register_next_step_handler(msg, ask)
            return


bot.remove_webhook()


bot.skip_pending = True
bot.polling(none_stop=True)

# –°–Ω–∏–º–∞–µ–º –≤–µ–±—Ö—É–∫ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π (–∏–∑–±–∞–≤–ª—è–µ—Ç –æ—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–æ–±–ª–µ–º)
# bot.remove_webhook()
#
# # –°—Ç–∞–≤–∏–º –∑–∞–Ω–æ–≤–æ –≤–µ–±—Ö—É–∫
# bot.set_webhook(url=WEBHOOK_URL_BASE + WEBHOOK_URL_PATH,
#                 certificate=open(WEBHOOK_SSL_CERT, 'r'))
#
# # –£–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ CherryPy
# cherrypy.config.update({
#     'server.socket_host': WEBHOOK_LISTEN,
#     'server.socket_port': WEBHOOK_PORT,
#     'server.ssl_module': 'builtin',
#     'server.ssl_certificate': WEBHOOK_SSL_CERT,
#     'server.ssl_private_key': WEBHOOK_SSL_PRIV
# })
#
# # –°–æ–±—Å—Ç–≤–µ–Ω–Ω–æ, –∑–∞–ø—É—Å–∫!
# cherrypy.quickstart(WebhookServer(), WEBHOOK_URL_PATH, {'/': {}})

#
# @bot.pre_checkout_query_handler(func=lambda query: True)
# def checkout(pre_checkout_query):
#     bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True,
#                                   error_message="Aliens tried to steal your card's CVV, but we successfully protected your credentials,"
#                                                 " try to pay again in a few minutes, we need a small rest.")


# @bot.message_handler(content_types=['successful_payment'])
# def got_payment(message):
#     bot.send_message(message.chat.id,
#                      'Hoooooray! Thanks for payment! We will proceed your order for `{} {}` as fast as possible! '
#                      'Stay in touch.\n\nUse /buy again to get a Time Machine for your friend!'.format(
#                          message.successful_payment.total_amount / 100, message.successful_payment.currency),
#                      parse_mode='Markdown')
